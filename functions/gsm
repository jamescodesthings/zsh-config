#!/usr/bin/env zsh

_gsm_description="Git super merge - Checks out a branch, updates it and merges"
_gsm_positional="branch"
_gsm_positional_desc="The branch to Check out, Update and Merge."
_gsm_flag_names[1]="--help"
_gsm_flag_messages[1]="shows help"

function _current_branch() {
	local ref
	ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
	local ret=$?
	if is not equal "$?" "0"
	then
		[[ $ret == 128 ]] && return
		ref=$(command git rev-parse --short HEAD 2> /dev/null)  || return
	fi
	echo ${ref#refs/heads/}
}

# Git Super Merge
function gsm () {
  local DEPS=(
    is
    git
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1" || has-flag '--help' $@; then
   print-help \
     "$0" \
     "$_gsm_description" \
     "_gsm_flag_names" \
     "_gsm_flag_messages" \
     "$_gsm_positional" \
     "$_gsm_positional_desc"
   return 0
  fi

  # Set current branch
  local THEIR_BRANCH=$1
  local MY_BRANCH=$(_current_branch)
  echo "$cs[info]Saved current branch$c[reset] $MY_BRANCH"
  echo "$cs[info]Checking Out$c[reset] $THEIR_BRANCH"

  # Check out branch
  git checkout "$THEIR_BRANCH" &> /dev/null

  if is not equal "$?" "0"; then
    echo "$cs[error]Could not find branch.$c[reset] $THEIR_BRANCH"
    return 1
  fi

  # Update
  git pull &> /dev/null

  if is not equal $? 0; then
    echo "$cs[error]Could not git pull$c[reset]"
    # Try go back
    git checkout "$MY_BRANCH" &>/dev/null
    return 1
  fi

  # Check out the original branch
  git checkout "$MY_BRANCH" &>/dev/null

  if is not equal $? 0; then
    echo "$cs[error]Could not checkout$c[reset] $MY_BRANCH"
    return 1
  fi

  # Finally Merge the input branch
  git merge --no-ff "$THEIR_BRANCH"
}

gsm "$@"
