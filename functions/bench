#!/usr/bin/env zsh

function _bench_commands() {
  local DEPS=(
    clr_white
  )

  if ! deps $DEPS; then
    return
  fi

  clr_white '\tonce: ' -n; clr_white 'Runs benchmark once'
  clr_white '\taverage [times]: ' -n; clr_white 'Runs benchmark many times'
  clr_white '\tdetail: ' -n; clr_white 'Benchmarks .zshrc with profiling'
  clr_white '\ttime: ' -n; clr_white 'Benchmarks .zshrc with time difference'
  clr_white '\txtrace: ' -n; clr_white 'Benchmarks .zshrc with xtrace output'
  clr_white '\tcommand [command]: ' -n; clr_white 'Benchmarks a command'
}

function _bench_usage() {
  local DEPS=(
    clr_cyan
    clr_white
  )

  if ! deps $DEPS; then
    return
  fi

  clr_cyan 'Usage:' -n
  clr_white 'bench [command]'
  clr_cyan 'Commands:'

  _bench_commands
}

function _bench_once() {
  local DEPS=(
    time
    zsh
  )

  if ! deps $DEPS; then
    return
  fi

  time zsh -i -c exit
}

function _bench_average() {
  local times=10

  if is not empty "$2"; then
    times=$2
  fi

  for i in $(seq 1 ${times}); do
    _bench_once
  done;
}

function _bench_detail() {
  PROFILING_ZSH=1 zsh -i -c exit
}

function _bench_xtrace() {
  local DEPS=(
    ts
  )

  if ! deps $DEPS; then
    return
  fi

  zsh -xv -i -c exit 2>&1 | ts '%.T'
}

function _bench_time() {
  logfile=$(mktemp zsh_profile.XXXXXXXX)

  PROFILING_ZSH=2 PROFILE_LOG=${logfile} zsh -i -c exit

  sort-timings "${logfile}"
}

function _bench_command() {
  local DEPS=(
    is
    clr_cyan
    clr_white
    clr_green
  )

  if ! deps $DEPS; then
    return
  fi

  # Benchmark a command
  local theCommand="${@:2}"

  clr_green "Benchmarking: " -n
  clr_white "${theCommand}"

  if is empty ${theCommand}; then
    clr_cyan "Usage:" -n
    clr_white "bench command [command] - Benchmarks a command using xtrace"
  fi

  zmodload zsh/zprof

  eval "${theCommand}" 2&>/dev/null

  zprof
  zmodload -u zsh/zprof
}

function bench() {
  local DEPS=(
    is
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1"; then
    _bench_usage
    return
  fi

  if is equal "$1" "once"; then
    _bench_once
    return
  fi

  if is equal "$1" "average"; then
    _bench_average "$@"
    return
  fi

  if is equal "$1" "command"; then
    _bench_command "$@"
    return
  fi

  if is equal "$1" "detail"; then
    _bench_detail
    return
  fi

  if is equal "$1" "xtrace"; then
    _bench_xtrace
    return
  fi

  if is equal "$1" "time"; then
    _bench_time
    return
  fi

  _bench_usage
}

bench "$@"
