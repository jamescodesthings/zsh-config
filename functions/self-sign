#!/usr/bin/env zsh

CERTS_DIR="${CERTS_DIR:-$HOME/.dev-certs}"
SELF_SIGNED_DOMAINS="${SELF_SIGNED_DOMAINS:-$CERTS_DIR/.domains}"
CERT_NAME="${CERT_NAME:-self-signed}"
CERT_PASS="${CERT_PASS:-JamesCodesThings1}"

_self_sign_description="Manages and generates a self signed ceritificate"
_self_sign_positional=""
_self_sign_positional_desc=""
_self_sign_flag_names[1]="--help"
_self_sign_flag_messages[1]="shows help"
_self_sign_flag_names[2]="--add [domain]"
_self_sign_flag_messages[2]="Adds [domain] to the list of domains"
_self_sign_flag_names[3]="--remove [domain]"
_self_sign_flag_messages[3]="Removes [domain] from the list of domains"
_self_sign_flag_names[4]="--list"
_self_sign_flag_messages[4]="Lists the domains for the newly generated certificate"
_self_sign_flag_names[5]="--generate"
_self_sign_flag_messages[5]="Generates a self signed certificate"
_self_sign_flag_names[6]="--trust"
_self_sign_flag_messages[6]="Trusts the self signed certificate"

function _self-sign_add() {
  if is empty "$1"; then
    echo "$cs[warn]Nothing passed to add$c[reset]"
    return 1
  fi

  if is not existing "$SELF_SIGNED_DOMAINS"; then
    echo "$cs[info]Creating Domain list file$c[reset] $SELF_SIGNED_DOMAINS"

    if is not existing "$CERTS_DIR"; then
      echo "$cs[info]Creating Certificate directory$c[reset] $CERTS_DIR"
      mkdir -p "$CERTS_DIR"
    fi

    echo "$1" > $SELF_SIGNED_DOMAINS
  else
    echo "$1" >> $SELF_SIGNED_DOMAINS
  fi

  echo "$cs[success]Added$c[reset] $1"
}

function _self-sign_remove() {
  if is empty "$1"; then
    echo "$cs[warn]Nothing passed to remove$c[reset]"
    return 1
  fi

  if is not existing "$SELF_SIGNED_DOMAINS"; then
    echo "$cs[warn]No domains file at $c[reset]$SELF_SIGNED_DOMAINS"
    return 1
  fi

  grep -v "$1" "$SELF_SIGNED_DOMAINS" > "$SELF_SIGNED_DOMAINS.temp"
  mv "$SELF_SIGNED_DOMAINS.temp" "$SELF_SIGNED_DOMAINS"
  echo "$cs[success]Removed$c[reset] $1"
}

function _self-sign_list() {
  if is not existing "$SELF_SIGNED_DOMAINS"; then
    echo "$cs[warn]No domains file at $c[reset]$SELF_SIGNED_DOMAINS"
    return 0
  else
    cat $SELF_SIGNED_DOMAINS | uniq | sort
  fi
}

function _self-sign_generate() {
  if is not existing "$SELF_SIGNED_DOMAINS"; then
    echo "$cs[warn]No certificates file at $c[reset]$SELF_SIGNED_DOMAINS$cs[warn], use --add $c[reset]$cs[flag][domain]$c[reset] $cs[warn]to create it.$c[reset]"
    return 1
  fi

  CNF_FILE_LOC="$CERTS_DIR/$CERT_NAME.cnf"
  echo "$cs[info]Creating .cnf file at$c[reset] $CNF_FILE_LOC"

  echo "[req]
default_bits = 2048
prompt = no
default_md = sha256
x509_extensions = v3_req
distinguished_name = dn

[dn]
C = UK
ST = West Midlands
L = Coventry
emailAddress = jamescodesthings@gmail.com
CN = localhost

[v3_req]
subjectAltName = critical, @alt_names

[alt_names]" > $CNF_FILE_LOC

  DNS_CTR=0
  IP_CTR=0
  sort -u $SELF_SIGNED_DOMAINS | while read line; do
    IP=$(echo "$line" | rg -o '^IP:(.*)$' -r '$1')
    if is not empty "$IP"; then
      IP_CTR=$(($IP_CTR+1))

      echo "IP.${IP_CTR} = $IP" >> "$CERTS_DIR/.alt-names"
    else
      DNS_CTR=$(($DNS_CTR+1))

      echo "DNS.${DNS_CTR} = $line" >> "$CERTS_DIR/.alt-names"
    fi
  done

  ALT_NAMES=$(cat "$CERTS_DIR/.alt-names" | sort -u)
  echo "$cs[h2]Alt Names:$c[reset]"
  echo "$ALT_NAMES"

  rm "$CERTS_DIR/.alt-names"

  echo "$ALT_NAMES" >> $CNF_FILE_LOC

  echo "\n$cs[h2]Alt Names:$c[reset]"
  echo "$cs[info]Generating$c[reset] $CERT_NAME.crt"

  openssl req \
    -newkey rsa:2048 \
    -x509 \
    -nodes \
    -keyout $CERTS_DIR/${CERT_NAME}.key \
    -new \
    -out $CERTS_DIR/${CERT_NAME}.crt \
    -config $CERTS_DIR/${CERT_NAME}.cnf \
    -sha256 \
    -days 365

    echo "\n$cs[info]Exporting$c[reset] $CERT_NAME.pfx"

    openssl pkcs12 -export \
      -out $CERTS_DIR/${CERT_NAME}.pfx \
      -inkey $CERTS_DIR/${CERT_NAME}.key \
      -in $CERTS_DIR/${CERT_NAME}.crt \
      -password pass:${CERT_PASS}

    rm $CERTS_DIR/${CERT_NAME}.cnf

    echo "\n$cs[success]Generated Certificates$c[reset]"
}

function _self-sign_trust() {
  if is not existing "$CERTS_DIR/${CERT_NAME}.crt"; then
    echo "$cs[warn]No Certificate, run generate first$c[reset]"
    return 1
  fi

  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain "$CERTS_DIR/${CERT_NAME}.crt"
  echo "$cs[success]Trusted$c[reset] $CERTS_DIR/${CERT_NAME}.crt"
}


# Self Sign, manages a list of domains for a local self signed cert, and generates the cert.
function self-sign () {
  local DEPS=(
    is
    openssl
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1" || has-flag '--help' $@; then
    print-help \
      "$0" \
      "$_self_sign_description" \
      "_self_sign_flag_names" \
      "_self_sign_flag_messages" \
      "$_self_sign_positional" \
      "$_self_sign_positional_desc"
    return 0
  fi

  if has-flag '--add' $@; then
    _self-sign_add "$(flag-value '--add' $@)"
    return $?
  fi;

  if has-flag '--remove' $@; then
    _self-sign_remove "$(flag-value '--remove' $@)"
    return $?
  fi;

  if has-flag '--list' $@; then
    _self-sign_list
    return $?
  fi;

  if has-flag '--generate' $@; then
    _self-sign_generate
    return $?
  fi;

  if has-flag '--trust' $@; then
    _self-sign_trust
    return $?
  fi
}

self-sign "$@"
