#!/usr/bin/env zsh

CERTS_DIR="${CERTS_DIR:-$HOME/.dev-certs}"
SELF_SIGNED_DOMAINS="${SELF_SIGNED_DOMAINS:-$CERTS_DIR/.domains}"
CERT_NAME="${CERT_NAME:-self-signed}"
CERT_PASS="${CERT_PASS:-JamesCodesThings1}"

function _self-sign_usage() {
  local DEPS=(clr_cyan clr_white)

  if ! deps $DEPS; then
    return
  fi

  clr_cyan 'Usage:' -n
  clr_white 'self-sign' -n
  clr_cyan ' [command]'
  echo ''

  clr_cyan 'Commands:'
  clr_white 'add [domain] - Adds a domain to the list of domains'
  clr_white 'remove [domain] - Removes a domain from the list of domains'
  clr_white 'list - Lists the list of domains'
  clr_white 'generate - Generates a self-signed cert with the domains as aliases'
  clr_white 'trust - Trusts the certificate'

}

# Self Sign, manages a list of domains for a local self signed cert, and generates the cert.
function self-sign () {
  local DEPS=(
    is
    clr_cyan
    clr_green
    clr_white
    clr_red
    openssl
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1"; then
    _self-sign_usage
    return 0
  fi

  if is equal "$1" "add"; then
    _self-sign_add $2
    return 0
  fi;

  if is equal "$1" "remove"; then
    _self-sign_remove $2
    return 0;
  fi;

  if is equal "$1" "list"; then
    _self-sign_list
    return 0;
  fi;

  if is equal "$1" "generate"; then
    _self-sign_generate
    return 0;
  fi;

  if is equal "$1" "trust"; then
    _self-sign_trust
    return 0;
  fi

  _self-sign_usage
}

function _self-sign_add() {
  if is empty "$1"; then
    _self-sign_usage
    return 0
  fi

  if is not existing "$SELF_SIGNED_DOMAINS"; then
    clr_magenta 'Creating Domain list file'

    if is not existing "$CERTS_DIR"; then
      clr_magenta 'Creating Certs Directory'
      mkdir -p "$CERTS_DIR"
    fi

    echo "$1" > $SELF_SIGNED_DOMAINS
  else
    echo "$1" >> $SELF_SIGNED_DOMAINS
  fi

  clr_green "Added $1"
}

function _self-sign_remove() {
    if is empty "$1"; then
    _self-sign_usage
    return 0
  fi

  if is not existing "$SELF_SIGNED_DOMAINS"; then
    clr_magenta 'Nothing to remove'
    return 0
  else
    grep -v "$1" "$SELF_SIGNED_DOMAINS" > "$SELF_SIGNED_DOMAINS.temp"
    mv "$SELF_SIGNED_DOMAINS.temp" "$SELF_SIGNED_DOMAINS"
    clr_green "Removed $1"
  fi
}

function _self-sign_list() {
  if is not existing "$SELF_SIGNED_DOMAINS"; then
    clr_magenta 'No domains yet'
    return 0
  else
    cat $SELF_SIGNED_DOMAINS | uniq | sort
  fi
}

function _self-sign_generate() {
  if is not existing "$SELF_SIGNED_DOMAINS"; then
    clr_magenta 'No certs dir, use add first'
    return 1
  fi

  clr_cyan 'Creating CNF File'

  echo "[req]
default_bits = 2048
prompt = no
default_md = sha256
x509_extensions = v3_req
distinguished_name = dn

[dn]
C = UK
ST = West Midlands
L = Coventry
emailAddress = jamescodesthings@gmail.com
CN = localhost

[v3_req]
subjectAltName = critical, @alt_names

[alt_names]" > "$CERTS_DIR/$CERT_NAME.cnf"

  DNS_CTR=0
  IP_CTR=0
  sort -u $SELF_SIGNED_DOMAINS | while read line; do
    IP=$(echo "$line" | rg -o '^IP:(.*)$' -r '$1')
    if is not empty "$IP"; then
      IP_CTR=$(($IP_CTR+1))

      echo "IP.${IP_CTR} = $IP" >> "$CERTS_DIR/.alt-names"
    else
      DNS_CTR=$(($DNS_CTR+1))

      echo "DNS.${DNS_CTR} = $line" >> "$CERTS_DIR/.alt-names"
    fi
  done

  ALT_NAMES=$(cat "$CERTS_DIR/.alt-names" | sort -u)
  clr_green 'Alt Names:'
  echo "$ALT_NAMES"

  rm "$CERTS_DIR/.alt-names"

  echo "$ALT_NAMES" >> "$CERTS_DIR/$CERT_NAME.cnf"
  echo ''
  clr_cyan 'Generating ' -n
  clr_white "$CERT_NAME.crt"

  openssl req \
    -newkey rsa:2048 \
    -x509 \
    -nodes \
    -keyout $CERTS_DIR/${CERT_NAME}.key \
    -new \
    -out $CERTS_DIR/${CERT_NAME}.crt \
    -config $CERTS_DIR/${CERT_NAME}.cnf \
    -sha256 \
    -days 365


    echo ''
    clr_cyan 'Exporting ' -n
    clr_white "$CERT_NAME.pfx"

    openssl pkcs12 -export \
      -out $CERTS_DIR/${CERT_NAME}.pfx \
      -inkey $CERTS_DIR/${CERT_NAME}.key \
      -in $CERTS_DIR/${CERT_NAME}.crt \
      -password pass:${CERT_PASS}

    rm $CERTS_DIR/${CERT_NAME}.cnf

    echo ''
    clr_green 'Generated Certificates'
}

function _self-sign_trust() {
  if is not existing "$CERTS_DIR/${CERT_NAME}.crt"; then
    clr_magenta 'No Certificate, run generate first'
    return 0
  fi

  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain "$CERTS_DIR/${CERT_NAME}.crt"
  clr_green 'Trusted ' -n
  clr_white "$CERTS_DIR/${CERT_NAME}.crt"
}

self-sign "$@"
