#!/usr/bin/env zsh

DB_HOST="james-ubuntu"
DB_PORT="3306"
DB_USER="root"
DB_PASS="engineius"
CNF_FILE="db.cnf"
EXTRACTED_FILE="backup.sql"
DB_AFTER_RESTORE_SCRIPT="$HOME/projects/sql/db-mobile-seed.sql"
AWS_PROFILE="readonly"
AWS_BUCKET="bucket.engineius.portal-development-dataset"
DEBUG=0

_restore_db_description="Restores a DB from the .tar.gz for the db"
_restore_db_positional="backup"
_restore_db_positional_desc="The backup file for the db in .tar.gz format"
_restore_db_flag_names[1]="--help"
_restore_db_flag_messages[1]="shows help"
_restore_db_flag_names[2]="--no-fix"
_restore_db_flag_messages[2]="Does not run the postprocessing script"
_restore_db_flag_names[3]="--no-delete"
_restore_db_flag_messages[3]="Does not DROP and recreate the DB"
_restore_db_flag_names[4]="--compare"
_restore_db_flag_messages[4]="Restores to db-compare for comparison"
_restore_db_flag_names[5]="--latest"
_restore_db_flag_messages[5]="Also downloads the latest db"


function _restore-db_latest() {
  AVAILABLE_DBS=$(aws s3api list-objects-v2 --bucket "$AWS_BUCKET" --profile $AWS_PROFILE)
  AVAILABLE_DBS=$(echo $AVAILABLE_DBS | jq ".Contents[] | .Key" -r | sort --reverse)
  FILTERED_DBS=$(echo $AVAILABLE_DBS| grep .sql.gz | grep -v TaskTracking | grep -v T12)
  LATEST_DB=$(echo $FILTERED_DBS | head -n 1)
  if is not empty "$LATEST_DB"; then
    echo $LATEST_DB
    return 0
  else
    return 1
  fi
}

function _restore-db_download() {
  DB_FILE="$1"
  if is existing "$DB_FILE"; then
    if confirm "$cs[warn]$DB_FILE already exists, delete?"; then
      echo "$cs[info]Removing:$c[reset] $DB_FILE"
      rm $DB_FILE
    else
      echo "$cs[error]Cool, doing nothing$c[reset]"
      return 1
    fi
  fi
  echo "$cs[info]Downloading:$c[reset] $DB_FILE"
  aws s3api get-object --profile $AWS_PROFILE --bucket "$AWS_BUCKET" --key $DB_FILE $DB_FILE
}

function _restore-db_restore() {
  DB_FILE="$@[-1]"
  if has-flag '--latest' $@; then
    DB_FILE=$(_restore-db_latest)
    if is equal $? 0; then
      # Download it
      _restore-db_download $DB_FILE
    else
      echo "$cs[error]Error Getting Latest DB$cs[reset]"
    fi
  fi

  echo "$cs[info]Restoring$c[reset] $DB_FILE"

  if is not existing "$DB_FILE"; then
    echo "$cs[error]Could not find file$c[reset] $1"
    return 1
  fi

  DB_DATE=$(echo "$DB_FILE" | rg -o "\d+\-\d+\-\d+")

  if is not empty "$DB_DATE"; then
    echo "$cs[info]Dump Date:$c[reset] $DB_DATE"
  else
    echo "$cs[error]Could not work out dump date$c[reset]"
    return 1
  fi

  _restore-db_create-conf "$CNF_FILE"

  _restore-db_extract "$DB_FILE"

  if is not existing "$EXTRACTED_FILE"; then
    echo "$DB_FILE $cs[error]was not successfully extracted to$c[reset] $EXTRACTED_FILE"
  fi

  DB_NAME="app_prod_$DB_DATE"

  if has-flag '--compare' $@; then
    DB_NAME="${DB_NAME}_compare"
  fi

  if ! has-flag '--compare' $@; then
    echo "$cs[info]Creating:$c[reset] $DB_NAME"

    _restore-db_mysql "DROP DATABASE IF EXISTS \`$DB_NAME\`"

    _restore-db_mysql "CREATE DATABASE \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"

    if is not equal "$?" "0"; then
      echo "$cs[error]Could not create database$c[reset]"
      _restore_db_cleanup
      return 1
    fi
  fi

  _restore-db_mysql-script "$DB_NAME" "$EXTRACTED_FILE"

  if is not equal $? 0; then
    echo "$cs[error]Script failed:$c[reset] $EXTRACTED_FILE"
    _restore_db_cleanup
    return 1
  fi

  if has-flag '--no-fix' $@; then
    echo "$cs[info]Not running$c[reset] $DB_AFTER_RESTORE_SCRIPT $cs[info]due to --no-fix option$c[reset]"
  elif has-flag '--no-delete' $@; then
    echo "$cs[info]Not running$c[reset] $DB_AFTER_RESTORE_SCRIPT $cs[info]due to --no-delete option$c[reset]"
  else
    _restore-db_mysql-script "$DB_NAME" "$DB_AFTER_RESTORE_SCRIPT"

    if is not equal "$?" "0"; then
      echo "$cs[eror]Script failed:$c[reset] $DB_AFTER_RESTORE_SCRIPT"
      _restore_db_cleanup
      return 1
    fi
  fi

  _restore_db_cleanup
  echo "$cs[success]Restored$c[reset] $DB_FILE"
}

function _restore-db_mysql() {
  if is equal "1" "$DEBUG"; then
    echo "$cs[info]Sql:$c[reset] $1"
  fi
  mysql --defaults-extra-file=$CNF_FILE -e $1
}

function _restore-db_mysql-script() {
  if is not existing "$2"; then
    echo "$cs[error]Could not find$c[reset] $2"
    return 1
  fi

  if is empty "$1"; then
    echo "$cs[error]No DB selected?$c[reset]"
    return 1
  fi

  FILE_SIZE=$(du -h $2 | rg -o ".*?\s" | xargs)

  echo "$cs[info]Running SQL Script:$c[reset] $2 ($FILE_SIZE) $cs[info]on$c[reset] $1"

  pv $2 | mysql --defaults-extra-file=$CNF_FILE $1
}

function _restore_db_cleanup() {
  echo "$cs[info]Cleaning Up$c[reset]"
  _restore-db_remove-conf
  _restore-db_remove_backup_file
}

function _restore-db_create-conf() {
  echo "[client]" > $CNF_FILE
  echo "user=$DB_USER" >> $CNF_FILE
  echo "password=$DB_PASS" >> $CNF_FILE
  echo "host=$DB_HOST" >> $CNF_FILE
  echo "port=$DB_PORT" >> $CNF_FILE
}

function _restore-db_remove-conf() {
  if is existing "$CNF_FILE"; then
    if is equal "1" "$DEBUG"; then
      echo "$cs[info]Deleting$c[reset] $CNF_FILE"
    fi
    rm $CNF_FILE
  fi
}

function _restore-db_extract() {
  echo "$cs[info]Extracting$c[reset] $1 $cs[info]to$c[reset] $EXTRACTED_FILE"
  gzip -c -d "$1" > $EXTRACTED_FILE
}

function _restore-db_remove_backup_file() {
  if is existing "$EXTRACTED_FILE"; then
    if is equal "1" "$DEBUG"; then
      echo "$cs[info]Deleting$c[reset]$EXTRACTED_FILE"
    fi
    rm $EXTRACTED_FILE
  fi
}


# Restores a sql database to a new db
function restore-db() {
  local DEPS=(
    is
    du
    gzip
    mysql
    pv
    aws
    aria2c
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1" || has-flag '--help' $@; then
    print-help \
      "$0" \
      "$_restore_db_description" \
      "_restore_db_flag_names" \
      "_restore_db_flag_messages" \
      "$_restore_db_positional" \
      "$_restore_db_positional_desc"
    return 0
  fi

  if is not empty "$@[-1]"; then
    _restore-db_restore $@
    return $?
  fi
}

restore-db "$@"
