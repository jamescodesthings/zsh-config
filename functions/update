#!/usr/bin/env zsh

# Make this 1 to debug
export _UPDATE_DEBUG=0
# Make this 1 to test
export _UPDATE_TEST=0

_update_description="Updates the system"
_update_positional="targets"
_update_positional_desc="The thing(s) to update, space delimited."
_update_flag_names[1]="--help"
_update_flag_messages[1]="shows help"
_update_flag_names[2]="--quiet"
_update_flag_messages[2]="hide command output"

# Update commands
# Homebrew
_update_flags[1]="brew"
_update_names[1]="Homebrew"
_update_checks[1]="is osx && is available brew"
_update_commands[1]="brew update && brew upgrade && brew cask upgrade"

# ZInit
function _update_zinit() {
  # Self update
  zinit self-update
  # Plugin parallel update
  zinit update --parallel
}
_update_flags[2]="zinit"
_update_names[2]="ZInit"
_update_checks[2]="is available zinit"
_update_commands[2]="_update_zinit"

# xcodes
_update_flags[3]="xcodes"
_update_names[3]="xcodes"
_update_checks[3]="is available xcodes"
_update_commands[3]="xcodes update"

# TLDR
_update_flags[4]="tldr"
_update_names[4]="TLDR"
_update_checks[4]="is available tldr"
_update_commands[4]="tldr --update"

# ASDF
_update_flags[5]="asdf"
_update_names[5]="ASDF"
_update_checks[5]="is available asdf"
_update_commands[5]="asdf plugin update --all"

function _update_node() {
  asdf install nodejs latest
  asdf global nodejs latest
  _update_updating "NPM"
  # Updates NPM
  node --version
  npm install -g npm
  if is available asdf-reshim; then
    asdf-reshim
  fi
  _update_updated "NPM"
}

_update_flags[6]="node"
_update_names[6]="NodeJS"
_update_checks[6]="is available asdf"
_update_commands[6]="_update_node"


_update_flags[7]="arch"
_update_names[7]="Arch"
_update_checks[7]="is available pacman"
_update_commands[7]="sudo pacman -Syu"

_update_flags[8]="yay"
_update_names[8]="Arch: Yay"
_update_checks[8]="is available yay"
_update_commands[8]="yay -Syu"

_update_flags[9]="debian"
_update_names[9]="Debian"
_update_checks[9]="is not osx && is available apt"
_update_commands[9]="sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove"

_update_flags[10]="snap"
_update_names[10]="Snapcraft"
_update_checks[10]="is available snap"
_update_commands[10]="sudo snap refresh"


function _update_zsh_config() {
  OUTPUT=$(cd $CUSTOM_DIR && git pull)
  RESULT=$?
  if is not equal 0 $RESULT; then
    echo $OUTPUT;
  fi
  return $RESULT
}

_update_flags[11]="zsh-config"
_update_names[11]="ZSH Config"
_update_checks[11]="is not empty '$CUSTOM_DIR' && is available git"
_update_commands[11]="_update_zsh_config"


_update_flags[12]="gcloud"
_update_names[12]="Google Cloud"
_update_checks[12]="is available gcloud"
_update_commands[12]="gcloud components update"

# XCode CLTs
_update_flags[13]="soft"
_update_names[13]="Software Updates"
_update_checks[13]="is available softwareupdate"
_update_commands[13]="softwareupdate --all --install --force"

# Testing
if is equal $_UPDATE_TEST 1; then
  _update_flags=( )
  _update_names=( )
  _update_commands=( )
  _update_checks=( )

  function _update_test_p() {
    echo "This command passes"
    return 0
  }
  function _update_test_f() {
    echo "This command fails"
    return 127
  }
    function _update_test_f2() {
    return 127
  }
  _update_flags[1]="pass"
  _update_names[1]="Test Passed"
  _update_commands[1]="_update_test_p"
  _update_flags[2]="fail"
  _update_names[2]="Test Failed"
  _update_commands[2]="_update_test_f"
  _update_flags[3]="fail2"
  _update_names[3]="Test Failed No Output"
  _update_commands[3]="_update_test_f2"
fi
# End of testing

function _update_updating() {
  echo "$cs[success]Updating$c[reset] $1"
}
function _update_updated() {
  echo "$cs[success]Updated$c[reset] $1"
}
function _update_skipping() {
  echo "$cs[warn]Skipping$c[reset] $1$cs[warn], check failed."
}

# _update_failed $NAME $COMMAND $UPDATE_RESULT $UPDATE_OUTPUT
function _update_failed() {
  local NAME=$1
  local COMMAND=$2
  local RESULT=$3
  local OUTPUT=$4
  echo "\n$cs[error]Update Failed $c[reset]$NAME$cs[error], exit code was not zero ($c[reset]$RESULT$cs[red])$c[reset]"
  echo "$cs[h3]Command:$c[reset] $COMMAND"
  if is not empty "$4"; then
    echo "$cs[h3]Output:$c[reset] $OUTPUT"
  else
    echo "$cs[h3]Output:$c[reset] No further output"
  fi
  echo ""
}

function _update_print_available() {
  echo "\n$cs[h2]Available $c[reset]$cs[param]targets$c[reset]$cs[h2]:$c[reset]"
  local index=1
  echo "$cs[param]all$c[reset]: Updates everything below"
  for FLAG in ${_update_flags[@]}; do
    NAME=$_update_names[$index]
    echo "$cs[param]$FLAG$c[reset]: $NAME"

    index=$(expr $index + 1)
  done
}

function _update_do_update() {
  index=$1
  NAME=$_update_names[$index]
  COMMAND=$_update_commands[$index]
  CHECK=$_update_checks[$index]

  if is not empty "$CHECK"; then
    eval "$CHECK"
    RESULT=$?

    if is not equal $RESULT 0; then
      _update_skipping $NAME
      continue
    fi
  fi

  _update_updating $NAME

  if is equal 1 $_UPDATE_DEBUG; then
    echo "$cs[info]$NAME ($index)$c[reset]"
    echo "$CHECK"
    echo "$COMMAND"
  fi

  local UPDATE_RESULT=0
  if is equal $QUIET 1; then
    eval "$COMMAND"
    UPDATE_RESULT=$?
  else
    # Perform the update command
    UPDATE_OUTPUT=$(eval "$COMMAND" 2>&1)
    UPDATE_RESULT=$?
  fi

  # Report Result
  if is equal 0 $UPDATE_RESULT; then
    _update_updated $NAME
  else
    _update_failed $NAME $COMMAND $UPDATE_RESULT $UPDATE_OUTPUT
  fi
}

function update() {
  local DEPS=(
    is
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1" || has-flag '--help' $@; then
      print-help \
        "$0" \
        "$_update_description" \
        "_update_flag_names" \
        "_update_flag_messages" \
        "$_update_positional" \
        "$_update_positional_desc"
    _update_print_available
    return 0
  fi

  has-flag '--quiet' $@
  local QUIET=$?

  TARGET="$@[-1]"


  has-flag 'all' $@
  local ALL=$?

  if is equal $ALL 0; then
    echo "$cs[info]Updating Everything$c[reset]"
    local index=1
    for NAME in ${_update_names[@]}; do
      (_update_do_update $index)

      index=$(expr $index + 1)
    done
    return
  fi

  # If --all is not passed then we check to see if a flag exists with a particular name
  # check each flag in the available flags:
  local index=1
  local matched=0
  for FLAG in ${_update_flags[@]}; do
    if has-flag "$FLAG" $@; then
      matched=$(expr $matched + 1)
      _update_do_update $index
    fi
    index=$(expr $index + 1)
  done

  if is equal $matched 0; then
    echo "$cs[warn]Nothing to update, check --help for usage.$c[reset]"
  fi
}

update "$@"
