#!/usr/bin/env zsh

_sim_description="Manages the running iOS simulator"
_sim_positional=""
_sim_positional_desc=""
_sim_flag_names[1]="--help"
_sim_flag_messages[1]="shows help"
_sim_flag_names[2]="--set-clock [time]"
_sim_flag_messages[2]="Sets the clock to [time] e.g. 10:00"
_sim_flag_names[3]="--screenshot [path]"
_sim_flag_messages[3]="Saves a screenshot to [path] (.png)"
_sim_flag_names[4]="--screen-record [path]"
_sim_flag_messages[4]="Starts screen recording to [path] (.mov)"
_sim_flag_names[5]="--install [path]"
_sim_flag_messages[5]="Installs the app at [path] (.app)"
_sim_flag_names[6]="--logs"
_sim_flag_messages[6]="Prints the simulator's logs"
_sim_flag_names[7]="--data-dir [bundle-id]"
_sim_flag_messages[7]="Open's the running simulator's data directory for [bundle-id], if ommitted xcrun simctl com.engineius.app.driver is used."

function _sim_install() {
  APP="$1"

  if is empty "$APP"; then
    echo "$cs[error]No app to install, see --help for usage.$c[reset]"
    return 1
  fi

  xcrun simctl install booted "$APP"
}

function _sim_set_clock() {
  TIME=$1
  if is empty "$TIME"; then
    echo "$cs[error]No time to set, see --help for usage.$c[reset]"
    return 1
  fi

  xcrun simctl status_bar booted override --time "$TIME" --batteryState charged --batteryLevel 100
}

function _sim_screenshot() {
  SS_PATH=$1
  if is empty "$SS_PATH"; then
    echo "$cs[error]No path to save screenshot to, see --help for usage.$c[reset]"
    return 1
  fi

  folderpath=${2%/*}
  if is not empty "$folderpath"; then
    mkdir -p "$folderpath"
  fi

  xcrun simctl io booted screenshot "$2" &>/dev/null
  if is not equal "$?" "0"; then
    echo "$cs[error]Could not capture screenshot. Try running:.$c[reset]"
    echo "xcrun simctl io booted screenshot \"$2\""
    return 1
  fi

  echo "$cs[success]Captured$c[reset] $2"
}

function _sim_screenrecord() {
  SR_PATH="$1"
  if is empty "$SR_PATH"; then
    echo "$cs[error]No path to save screen recording to, see --help for usage.$c[reset]"
    return 1
  fi;

  folderpath=${2%/*}
  if is not empty "$folderpath"; then
    mkdir -p "$folderpath"
  fi

  # xcrun simctl io booted recordVideo "$2"
  # if is not equal "$?" "0"; then
    echo "$cs[error]Could not capture screen recording. Try running:.$c[reset]"
    echo "xcrun simctl io booted recordVideo \"$2\""
    return 1
  # fi

  # clr_green "Captured $2"
}

function _sim_logs() {
  xcrun simctl spawn booted log stream --level=debug
}

function _sim_data_dir() {
  local BUNDLE_ID=${1:="com.engineius.app.driver"}
  local DATA_DIR=$(xcrun simctl get_app_container booted $BUNDLE_ID data)
  echo "$cs[info]Opening$c[reset] $DATA_DIR"
  open $DATA_DIR
}

# Git Super Merge
function sim () {
  local DEPS=(
    is
    clr_cyan
    clr_green
    clr_white
    clr_red
    xcrun
  )

  if ! deps $DEPS; then
    return
  fi

  if is empty "$1" || has-flag '--help' $@; then
    print-help \
      "$0" \
      "$_sim_description" \
      "_sim_flag_names" \
      "_sim_flag_messages" \
      "$_sim_positional" \
      "$_sim_positional_desc"
    return 0
  fi

  if has-flag '--set-clock' $@; then
    _sim_set_clock $(flag-value '--set-clock' $@)
    return $?
  fi
  if has-flag '--screenshot' $@; then
    _sim_screenshot  $(flag-value '--screenshot' $@)
    return $?
  fi

  if has-flag '--screen-record' $@; then
    _sim_screenrecord $(flag-value '--screen-record' $@)
    return $?
  fi

  if has-flag '--install' $@; then
    _sim_install $(flag-value '--install' $@)
    return $?
  fi

  if has-flag '--logs' $@; then
    _sim_logs
    return $?
  fi

  if has-flag '--data-dir' $@; then
    _sim_data_dir $(flag-value '--data-dir' $@)
  fi

}

sim "$@"
