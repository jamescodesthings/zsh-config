#!/usr/bin/env zsh

TEMPLATE_DIR="${TEMPLATE_DIR:-"$CUSTOM_DIR/templates"}"

_new_description="Creates new projects from templates stored in the template dir"
_new_positional=""
_new_positional_desc=""
_new_flag_names[1]="--help"
_new_flag_messages[1]="shows help"
_new_flag_names[2]="--name [name]"
_new_flag_messages[2]="Uses [name] as the project name (kebab-case)"
_new_flag_names[3]="--lang [language]"
_new_flag_messages[3]="Uses [language] as the project language"
_new_flag_names[4]="--out [outdir]"
_new_flag_messages[4]="Uses [outdir] as the output directory"
_new_flag_names[5]="--list"
_new_flag_messages[5]="Lists available languages"

function _new_subfn() {
  if is empty "$1"; then
    echo "$cs[warn]Nothing passed to subfn$c[reset]"
    return 1
  fi

  echo "$cs[success]subfn$c[reset] $1"
}

function _new_available() {
  echo "\n$cs[h2]Available Languages:$cs[reset]"
  # echo "$TEMPLATE_DIR";
  TEMPLATES=$(ls $TEMPLATE_DIR)
  echo "$cs[info]$TEMPLATES$cs[reset]"
}

function _new_available_vars() {
  echo "\n$cs[h2]Available Template Vars:$cs[reset]"

  echo "$cs[info]\$PROJECT_NAME$cs[reset]: Project name in input case (kebab-case), e.g. zombie-arena"
  echo "$cs[info]\$PROJECT_NAME_TITLE$cs[reset]: Project name in TitleCase, e.g. ZombieArena"
  echo "$cs[info]\$PROJECT_NAME_CAMEL$cs[reset]: Project name in camelCase, e.g. zombieArena"
  echo "$cs[info]\$PROJECT_NAME_PRETTY$cs[reset]: Project name in readable (pretty) case, e.g. Zombie Arena"
}

function _new_create() {
  LANGUAGE=$1
  NAME=$2
  OUT_DIR=$3

  if is empty "$OUT_DIR"; then
    OUT_DIR=$1
  fi

  # Confirm language exists
  PROJ_TMPL=$TEMPLATE_DIR/$LANGUAGE

  if is not existing "$PROJ_TMPL"; then
    echo "$cs[warn]$LANGUAGE template does not exist, check --list for available templates$cs[reset]"
    return 1
  fi

  echo "$cs[sub]Creating $cs[reset]$cs[param]$LANGUAGE$cs[reset]$cs[sub] project $cs[reset]$cs[flag]$NAME$cs[reset] in $cs[flag]./$OUT_DIR$cs[reset]"
  if is directory "$OUT_DIR"; then
  echo "$cs[warn]Overwriting existing projects if they exist$cs[reset]"
    if confirm "Delete $OUT_DIR?"; then
      rm -r "$OUT_DIR"
    fi
  fi

  echo "$cs[info]Copying from$cs[reset] $PROJ_TMPL $cs[info]to$cs[reset] ./$OUT_DIR"
  cp -R $PROJ_TMPL $OUT_DIR

  PROJECT_NAME="$NAME"
  PROJECT_NAME_ALMOST_TITLE="${${(C)PROJECT_NAME//_/ }:t}"
  PROJECT_NAME_TITLE="${PROJECT_NAME_ALMOST_TITLE/-/}"
  PROJECT_NAME_PRETTY="${PROJECT_NAME_ALMOST_TITLE/-/ }"
  PROJECT_NAME_CAMEL="${PROJECT_NAME_TITLE:0:1:l}${PROJECT_NAME_TITLE:1}"

  echo "\n$cs[h2]Available Vars:$cs[reset]"
  echo "$cs[param]\$PROJECT_NAME:$cs[reset] $PROJECT_NAME"
  echo "$cs[param]\$PROJECT_NAME_TITLE:$cs[reset] $PROJECT_NAME_TITLE"
  echo "$cs[param]\$PROJECT_NAME_PRETTY:$cs[reset] $PROJECT_NAME_PRETTY"
  echo "$cs[param]\$PROJECT_NAME_CAMEL:$cs[reset] $PROJECT_NAME_CAMEL"
  echo "\n$cs[h2]Replacing template vars in filenames:$cs[reset]"

  find $OUT_DIR | while IFS= read -r file; do
    NEW_NAME=$file
    if is substring "PROJECT_NAME_TITLE" "$NEW_NAME"; then
      NEW_NAME=${NEW_NAME/PROJECT_NAME_TITLE/$PROJECT_NAME_TITLE}
    fi
    if is substring "PROJECT_NAME_PRETTY" "$NEW_NAME"; then
      NEW_NAME=${NEW_NAME/PROJECT_NAME_PRETTY/$PROJECT_NAME_PRETTY}
    fi
    if is substring "PROJECT_NAME_CAMEL" "$NEW_NAME"; then
      NEW_NAME=${NEW_NAME/PROJECT_NAME_CAMEL/$PROJECT_NAME_CAMEL}
    fi
    if is substring "PROJECT_NAME" "$NEW_NAME"; then
      NEW_NAME=${NEW_NAME/PROJECT_NAME/$PROJECT_NAME}
    fi

    if is not equal "$OUT_DIR/$file" "$OUT_DIR/$NEW_NAME"; then
      mv $file $NEW_NAME
    fi
  done

  echo "\n$cs[h2]Replacing template vars in files:$cs[reset]"

  find $OUT_DIR | while IFS= read -r file; do
    echo -n "$cs[flag]$file$cs[reset] -> "
    NEW_FILENAME=${file/.tpl/}
    echo -n "$cs[param]$NEW_FILENAME$cs[reset]"
    if is equal "$NEW_FILENAME" "$file"; then
      echo ": $cs[warn]not a template $cs[reset]"
      continue;
    fi

    TEMPL=$(cat $file)
    TEMPL=${TEMPL//\$PROJECT_NAME_PRETTY/$PROJECT_NAME_PRETTY}
    TEMPL=${TEMPL//\$PROJECT_NAME_TITLE/$PROJECT_NAME_TITLE}
    TEMPL=${TEMPL//\$PROJECT_NAME_CAMEL/$PROJECT_NAME_CAMEL}
    TEMPL=${TEMPL//\$PROJECT_NAME/$PROJECT_NAME}
    echo $TEMPL > $NEW_FILENAME

    rm $file

    echo ": $cs[success]Done$cs[reset]"
  done

  echo "\n$cs[success]Created$cs[reset] ./$OUT_DIR$cs[success]:$cs[reset]"
  exa -Ra1 $OUT_DIR
}

function new() {
  local DEPS=(
    is
    exa
  )

  if ! deps $DEPS; then
    return 1
  fi

  if is empty "$1" || has-flag '--help' $@; then
    print-help \
      "$0" \
      "$_new_description" \
      "_new_flag_names" \
      "_new_flag_messages" \
      "$_new_positional" \
      "$_new_positional_desc"
    _new_available
    _new_available_vars
    return 0
  fi

  if has-flag '--list' $@; then
    _new_available
    _new_available_vars
    return $?
  fi

  if ! has-flag '--name' $@; then
    echo "$cs[warn]Missing --name, check --help for usage.$cs[reset]"
    return 1
  fi

  if ! has-flag '--lang' $@; then
    echo "$cs[warn]Missing --lang, check --help for usage.$cs[reset]"
    return 1
  fi

  NAME="$(flag-value '--name' $@)"
  LANGUAGE="$(flag-value '--lang' $@)"
  OUT_DIR="$(flag-value '--out' $@)"

  if is empty "$NAME"; then
    echo "$cs[warn]Missing --name value, check --help for usage.$cs[reset]"
    return 1
  fi

  if is equal "$NAME" "$LANGUAGE"; then
    echo "$cs[warn]Missing language option, check --help for usage.$c[reset]"
    return 1
  fi

  _new_create "$LANGUAGE" "$NAME" "$OUT_DIR"
  return $?
}

new "$@"
