{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Print to console": {
		"prefix": "clog",
		"body": [
			"console.log('$1');",
		],
		"description": "Log output to console"
	},

	"Performance Import": {
		"prefix": "perf-import",
		"body": [
			"import { performance, PerformanceObserver } from 'perf_hooks';",
			"$1"
		],
		"description": "import performance"
	},
	
	"Performance bootstrap": {
		"prefix": "perf-boot",
		"body": [
			"const perfObserver = new PerformanceObserver((items) => {",
			"  items.getEntries().forEach((entry) => {",
			"    console.log(entry);",
			"  });",
			"});",
			"perfObserver.observe({ entryTypes: ['measure'], buffer: true });",
			"$1"
		],
		"description": "Bootstrap performance"
	},
	
	"Performance bootstrap in test": {
		"prefix": "perf-boot-test",
		"body": [
			"let perfObserver;",
			"",
			"before('bootstrap profiling', () => {",
			"  if (!profile) {",
			"    return;",
			"  }",
			"",
			"  perfObserver = new PerformanceObserver((items) => {",
			"    items.getEntries().forEach((entry) => {",
			"      const { name, duration } = entry;",
			"      const durationSeconds = (duration / 1000).toFixed(2);",
			"      const minutes = Math.floor(durationSeconds / 60);",
			"      const seconds = durationSeconds % 60;",
			"      const minutesMessage = minutes > 0 ? minutes + 'm ' : '';",
			"      console.log(`\\${name}: \\${minutesMessage}\\${seconds}s`);",
			"    });",
			"  });",
			"",
			"  perfObserver.observe({ entryTypes: ['measure'], buffer: true });",
			"});",
			"",
			"after('stop profiling', () => {",
			"  perfObserver?.disconnect();",
			"});",
			"$1"
		],
		"description": "Bootstrap performance in test"
	},

	"Performance Mark": {
		"prefix": "pmark",
		"body": [
			"performance.mark('$1');",
		],
		"description": "Mark performance"
	},

	"Performance Measure": {
		"prefix": "pmeasure",
		"body": [
			"performance.measure('${1:name}', '${2:start}', '${3:end}');",
		],
		"description": "Measure performance"
	}
}